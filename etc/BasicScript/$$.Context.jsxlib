/*******************************************************************************

		Name:           Context
		Desc:           The abstract Context of a Basic Script.
		Path:           /etc/BasicScript/$$.Context.jsxlib
		Require:        $$.BasicScript (incl. $$.Settings.)
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Module (within $$.BasicScript)
		API:            ?beforeActivate() ?onActive()
		                ?beforeBackup()   ?onQuit()
		DOM-access:     YES [app.properties + Settings' API]
		Todo:           ---
		Created:        180307 (YYMMDD)
		Modified:       180322 (YYMMDD)

*******************************************************************************/

;if( !$$.BasicScript ){ alert(__("%1 requires the %2 module.",'Context','BasicScript')); exit(); }
;$$.BasicScript.hasOwnProperty('Context') || eval(__(MODULE, $$.BasicScript.toSource(), 'Context', 180322))

	[PRIVATE]
	
	({
		_GO_: function(/*int32*/runMode,  µ,host,ss)
		//----------------------------------
		// (Go.) 1. Call the `beforeActivate` hook if available ;
		// 2. activate the settings ; 3. call and return the result
		// of `onActive` (if available), otherwise return undefined.
		// ---
		// [REM] Althoug 'private,' this function is called from the parent
		// module in a way that waives the usual rules. The reason is, we
		// want to keep it as secure as possible while opening the PUBLIC
		// area to the client code.
		// ---
		// => any [CONTINUE]  |  true [SKIP_UI]  |  false [STOP]
		{
			µ = callee.µ;

			host = 'function' == typeof µ.beforeActivate ?
				µ.beforeActivate(runMode) :
				void 0;

			ss = $.global[µ.__root__].Settings.activate(host);
			
			// Default LIVE keys.
			// ---
			ss.hasDocument = app.properties.activeDocument ? 1 : 0;
			ss.hasSelection = (app.properties.selection||0).length ? 1 : 0;

			return 'function' == typeof µ.onActive ?
				µ.onActive(ss,runMode) :
				void 0;
		},

		_QT_: function(/*bool*/bk,/*int*/runMode,  µ,$$,host)
		//----------------------------------
		// (Quit.) 1. If `bk` is truthy, backup the settings (in such case,
		// the `beforeBackup` hook is called if available) ;
		// 2. Call the `onQuit` hook if available.
		// ---
		// [REM] Althoug 'private,' this function is called from the parent
		// module in a way that waives the usual rules. The reason is, we
		// want to keep it as secure as possible while opening the PUBLIC
		// area to the client code.
		// ---
		// => undefined
		{
			µ = callee.µ;
			$$ = $.global[callee.µ.__root__];

			// Backup stage?
			// ---
			if( bk )
			{
				host = 'function' == typeof µ.beforeBackup ?
					µ.beforeBackup($$.Settings(),runMode) :
					void 0;
				$$.Settings.backup(host);
			}

			'function' == typeof µ.onQuit && µ.onQuit(bk,$$.Settings(),runMode);
		},

	})

	//==========================================================================
	// HOOKS TO COME NEXT?
	//==========================================================================
	// From a distinct `jsxinc` (included later,) you may provide
	// a [PUBLIC] cluster for implementing the below HOOKS.
	//==========================================================================

	// beforeActivate: function beforeActivate_Ï_d(/*int*/runMode)
	// ----------------------------------
	// Would be called before Settings activation. Can be used to
	// return a specific InDesign object (active document, selected item...)
	// to be passed as first argument in `$$.Settings.activate()`.
	// If your settings don't declare OBJ or HYB keys, simply remove this
	// function, or let it return undefined. Contextual tasks that depend
	// on activated settings should be managed through `onActive`.
	// ---
	// `runMode` represents the script run flag (signed integer.)
	// ---
	// => DOM object | undefined
	// {},

	// onActive: function onActive_O_Ï_x$false$(/*settings*/ss,/*int*/runMode)
	// ----------------------------------
	// Would be called as soon as Settings are active ; `ss` offers
	// a direct access to every key (e.g `ss.mySetting`.) You should implement
	// here any contextual parsing (active document, selection, preferences...)
	// intended to refine `ss`, UI options, or possible actions to be done.
	// In principle this is a read-only mechanism regarding the scripting DOM.
	// ---
	// If this function returns false, UI and Server stages are cancelled and
	// `onQuit` is triggered without saving the settings.
	// ---
	// If this function returns true, UI stage is skipped but Server stage is
	// processed normally.
	// ---
	// `runMode` represents the script run flag (signed integer.)
	// ---
	// => any [CONTINUE]  |  true [SKIP-UI]  |  false [STOP]
	// {},

	// beforeBackup: function beforeBackup_O_Ï_d$null$(/*settings*/ss,/*int*/runMode)
	// ----------------------------------
	// Would be called before saving the Settings.
	// May return an InDesign object to be passed as first argument
	// in `$$.Settings.backup()`. If your settings don't manage OBJ or
	// HYB keys, the default behavior is obtained by returning undefined.
	// Returning `null` has the special meaning of skipping HYB keys
	// while APP keys are saved.
	// [REM] This function only makes sense for preparing, not for discarding,
	// the backup operation. Backup can be discarded upstream.
	// ---
	// `runMode` represents the script run flag (signed integer.)
	// ---
	// => DOM object | NULL | undefined
	// {},
		
	// onQuit: function onQuit_B_Ï_(/*bool*/bk,/*settings*/ss,/*int*/runMode)
	// ----------------------------------
	// Would be called at the very end of the process, when
	// the Context quits. Can be used to display a final prompt, etc.
	// ---
	// `bk` :: whether the Backup operation has been performed.
	// `runMode` represents the script run flag (signed integer.)
	// ---
	// => undefined
	// {},