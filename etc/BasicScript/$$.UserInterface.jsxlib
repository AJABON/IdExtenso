/*******************************************************************************

		Name:           UserInterface
		Desc:           The abstract UI of a Basic Script.
		Path:           /etc/BasicScript/$$.UserInterface.jsxlib
		Require:        $$.BasicScript
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Module (within $$.BasicScript)
		API:            SmartListItemGetter
		                ?beforeShow() ?onClose()
		DOM-access:     YES
		Todo:           ---
		Created:        180307 (YYMMDD)
		Modified:       190317 (YYMMDD)

*******************************************************************************/

;if( !$$.BasicScript ){ alert(__("%1 requires the %2 module.",'UserInterface','BasicScript')); exit(); }
;$$.BasicScript.hasOwnProperty('UserInterface') || eval(__(MODULE, $$.BasicScript.toSource(), 'UserInterface', 190317))

	[PRIVATE]
	
	({
		S2DG : function(/*{ssKey=>prefix}*/o,/*settings*/ss,/*Dialog&*/dlg,  k,p,v)
		//----------------------------------
		// (Settings-to-Dialog-Keys.) Update Dialog keys from settings.
		// => undefined
		{
			if( !(o.__count__) ) return;

			for( k in o )
			{
				if( !o.hasOwnProperty(k) ) continue;

				p = o[k]||'';                 // Special prefix, or empty.
				v = ss[k];                    // Raw ss value.

				// UI keys with `%` prefix must be treated as 100*v,
				// where the ss key `v` is the *real* value. If your
				// ss key handles the percentage value as such, do not
				// use the `%` prefix on it: values already match!
				// ---
				'%'==p && (v*=100);

				// UI keys with `µ` prefix do not require special
				// treatment at this point. Indeed, we assume that both
				// ui and ss handles POINT units behind the scene.
				// So far, `µ` is therefore a "transparent prefix."
				// ---
				// 'µ'==p && (v);

				dlg.setValueKey( p+k, v );
			}
		},

		DG2S : function(/*{ssKey=>prefix}*/o,/*Dialog*/dlg,/*settings&*/ss,  k,p,v)
		//----------------------------------
		// (Dialog-to-Settings-Keys.) Update settings from Dialog keys.
		// => undefined
		{
			if( !(o.__count__) ) return;
			
			// [ADD180515] Manages smart list strings.
			// ---
			const SLIG = callee.µ.SmartListItemGetter;

			for( k in o )
			{
				if( !o.hasOwnProperty(k) ) continue;

				p = o[k]||'';                  // Special prefix, or empty
				
				v = SLIG && 'string'==typeof ss[k] && 'Dropdown'==(dlg.getWidgetKey(p+k)||0).__class__ ?
					dlg.getStringKey( p+k ) :  // List item as a string.
					dlg.getValueKey ( p+k );   // Raw ui value.

				// UI keys with `%` prefix must be understood as returning
				// 100*ss[k], so ss[k] has to be set to v/100. If your
				// ss key handles the percentage value as such, do not use
				// the `%` prefix on it: values already match!
				// ---
				'%'==p && (v/=100);

				// UI keys with `µ` prefix do not require special
				// treatment at this point. Indeed, we assume that both
				// ui and ss handles POINT units behind the scene.
				// So far, `µ` is therefore a "transparent prefix."
				// ---
				// 'µ'==p && (v);

				ss[k] = v;
			}
		},

		_GO_: function(/*{ DXML:xml|false, SPEC:str|false, PRFX:'%', KEYS:{ss-Key=>prefix|''} }*/uiCache,/*int*/runMode,  $$,µ,dlg,ss,r)
		//----------------------------------
		// (Go.) Show the dialog (if any) with applied settings ; call the
		// `beforeShow` and `onClose` hooks if available.
		// ---
		// [REM] Althoug 'private,' this function is called from the parent
		// module in a way that waives the usual rules. The reason is, we
		// want to keep it as secure as possible while opening the PUBLIC
		// area to the client code.
		// ---
		// => any [CONTINUE]  |  true [SKIP-SERVER]   |  false [STOP]
		{
			$$ = $.global[callee.µ.__root__]; // agnostic reference
			µ = callee.µ;

			// Check that the dialog exists.
			// ---
			(dlg=uiCache.SPEC) && ( (dlg=resolve(dlg)).isValid || (dlg=false) );
			if( !dlg ) return;
			
			// ss -> dlg keys.
			// ---
			ss = $$.Settings();
			this.S2DG(uiCache.KEYS, ss, dlg);

			// `beforeShow` hook.
			// ---
			'function' == typeof µ.beforeShow && µ.beforeShow(dlg,ss,runMode);
			
			// Show the dialog.
			// ( If not canceled, dlg -> ss keys. )
			// ---
			(r=dlg.show()) && this.DG2S(uiCache.KEYS, dlg, ss);
			
			// onClose hook?
			// ---
			return 'function' == typeof µ.onClose ?
				µ.onClose(r,dlg,ss,runMode) :
				// [FIX190317] Not supposed to return true.
				( r ? void 0 : false );
		},
	})
	
	[PUBLIC]
	
	({
		// [ADD180515] Improves the *getter* of key-based dropdowns.
		// By default, the current item is returned *by index* (its
		// index in the stringList.) If the flag SmartListItemGetter
		// is ON, any settings key that has been declared as a *string*
		// will be returned as the corresponding string in the list.
		// See ~.DG2S for detail.
		// [REM] This flag does not affect the setter (~.S2DG) since
		// `dlg.setValueKey` is smart enough to route, either a number
		// to a list index, or a string to a list item.
		// ---
		SmartListItemGetter : 0,
	})

	//==========================================================================
	// From a distinct `jsxinc` (included later,) you may provide
	// a [PUBLIC] cluster for implementing the below HOOKS.
	//==========================================================================

	// beforeShow : function beforeShow_$Dialog$_O_Ï_(/*Dialog*/dlg,/*settings*/ss,/*int*/runMode)
	// ----------------------------------
	// Called once settings have been automatically populated into the Dialog
	// object through linked keys. Implement this function to preprocess, before
	// showing the dialog, existing or additional settings.
	// ---
	// `runMode` represents the script run flag (signed integer.)
	// ---
	// => undefined
	// {},

	// onClose : function beforeShow_B_$Dialog$_O_Ï_x$Boolean$(/*bool*/ok,/*Dialog*/dlg,/*settings*/ss,/*int*/runMode)
	// ----------------------------------
	// Called once the dialog is closed and its values have been automatically
	// populated into Settings through linked keys. Implement this function
	// to postprocess existing or additional settings.
	// `ok` indicates wether the user has validated the dialog. In most cases
	// `false==ok` should lead to stop the process (that is, return false.)
	// You can also return true to skip the Server while allowing backup.
	// ---
	// `runMode` represents the script run flag (signed integer.)
	// ---
	// => any [CONTINUE]  |  true [SKIP-SERVER]  |  false [STOP]
	// {},
