/*******************************************************************************

		Name:           function
		Desc:           Temporarily extends Function features.
		Path:           /core/Ext/$$.function.jsxinc
		Require:        ---
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Part of /Ext
		API:            copy() self() [PRIVATE]() [PUBLIC]() [PARENT]()
		DOM-access:     NO
		Todo:           ---
		Created:        170322 (YYMMDD)
		Modified:       170417 (YYMMDD)

*******************************************************************************/

	//==========================================================================
	// Function.prototype.copy()
	// [REM] Autodeleted once the framework has been loaded.
	//==========================================================================

	Function.prototype.copy = function(/*str*/newPath)
	//----------------------------------
	// <this> :: public method of the current module.
	// ---
	// Temporarily provide a .copy utility to any public method
	// in order to make it available from any other *existing* module.
	// newPath :: path of the alias method to be registered. Any valid
	//            function path, either absolute eg "/$$/myModule/myFuncAlias"
	//            or relative to the current module eg "../../myFuncAlias"
	// If newPath ends with a dot '.' or a slash '/', then the current
	// function key will be used in the specified module location.
	// If newPath is empty, then '/' ie [global] is considered the target loc.
	// [REM] Resolving the path is deferred to Function.prototype[PUBLIC].
	// [REM] Autodeleted once the framework has been loaded.
	// => this
	{
		newPath || (newPath='/');
		'.' == newPath.substr(-1) && (newPath+='/');

		this.__copy__ = newPath;
		return this;
	};

	//==========================================================================
	// Function.prototype.self()
	// [REM] Autodeleted once the framework has been loaded.
	//==========================================================================

	Function.prototype.self = function(/*obj|null*/context,/*any*/x,/*any*/y)
	//----------------------------------
	// <this> :: method of the current module.
	// ---
	// [ADD170417] Temporarily provide a .self utility to any public method
	// so that it invokes itself with x and y args, and returns itself.
	// [REM] Autodeleted once the framework has been loaded.
	// => this
	{
		this.call(context,x,y);
		return this;
	};

	//==========================================================================
	// Function.prototype.PRIVATE()
	// Function.prototype.PUBLIC()
	// Function.prototype.PARENT()
	// [REM] Autodeleted once the framework has been loaded.
	//==========================================================================

	Function.prototype[PRIVATE] = function(/*obj*/o,  priv,s,k)
	//----------------------------------
	// <this> :: current module.
	// ---
	// Temporarily provide a generic [PRIVATE] utility to any module,
	// for registering private members in this['~'].
	// [REM] Autodeleted once the framework has been loaded.
	// => this
	{
		priv = this['~'];
		s = this.__path__ + '~/';
		for( k in o )
		{
			if( !o.hasOwnProperty(k) ) continue;
			if( 'function' == typeof o[k] )
			{
				o[k].setup
				({
					__path__: s + k,    // eg '/$$/Env/~/FKEY'
					µ: this,            // every private method can use callee.µ
				});
			}
			priv[k] = o[k];
		}
		return this;
	};

	Function.prototype[PUBLIC] = function F(/*obj*/o,  path,mods,k,s,t,p,oo)
	//----------------------------------
	// <this> :: current module.
	// ---
	// Temporarily provide a generic [PUBLIC] utility to any module,
	// for registering public members in this.
	// [REM] Autodeleted once the framework has been loaded.
	// => this
	{
		path = this.__path__;   // eg '/$$/Env/'

		// Make sure this module path is registered
		// in $$'s private __mods__.
		// ---
		mods = $.global[this.__root__]['~'].__mods__;
		mods.hasOwnProperty(path) || (mods[path]={});

		for( k in o )
		{
			if( !o.hasOwnProperty(k) ) continue;
			if( 'function' == typeof o[k] )
			{
				o[k].setup
				({
					__path__: path + k,    // eg '/$$/Env/idVersion'
					µ: this,               // every public method can use callee.µ
				});
				
				// Eg:  mods['/$$/Env/']['idVersion'] = 'idVersion_ns_b_SB'
				// ---
				mods[path][k] = o[k].name;
				
				if( o[k].hasOwnProperty('__copy__') )
				{
					p = o[k].__copy__;
					
					if( '/'==p.substr(-1) )
					{
						// If p ends with a slash, the path is fine and s==k,
						// that is, alias-key == original-key (eg 'idVersion'.)
						// ---
						s = k;
					}
					else
					{
						// Otherwise, extract the key from the copy path `p`.
						// => s :: alias-key
						// => p :: remaining path xxx/.../OtherModule/
						// ---
						t = p.lastIndexOf('/');
						s = p.substr(1+t);
						p = p.substr(0,1+t);
					}

					// Resolve path.toPath(p)
					// ---
					if( (p=path.toPath(p)) && (oo=mods[p]) && !oo.hasOwnProperty(s) )
					{
						// p :: '/$$/.../OtherModule/' ;  s :: 'doActionAlias'
						// => $.global['$$'][...]['OtherModule']['doActionAlias'] = o[k]
						// ---
						t = $.global[this.__root__].resolve(p);
						t[s] = o[k];

						// => mods['/$$/.../OtherModule/']['doActionAlias']='/$$/.../CurModule/doAction'
						// ---
						oo[s] = path + k;
						
						// Rewrite the resolved __copy__ path.
						// ---
						o[k].__copy__ = p + s;
					}
					else
					{
						throw Error(__("\rThe path %1 is invalid in %2%3. Make sure your argument is correct while calling copy(newPath) and that the specified location is a valid module. Also, make sure the alias is not already used in that destination module.", (p+s).toSource(), path, k));
					}
				}
			}

			this[k] = o[k];
		}
		return this;
	};

	Function.prototype[PARENT] = function F(/*obj*/o,  parent)
	//----------------------------------
	// <this> :: current module.
	// ---
	// Temporarily provide a generic [PARENT] utility to any module
	// for registering public members in its parent.
	// [REM] Autodeleted once the framework has been loaded.
	// => this (current module)
	{
		// this.__path__ :: /$$/SomeModule/SubModule/  =>  $.global['$$']['SomeModule']
		// this.__path__ :: /$$/ => $.global
		// ---
		parent = $.global[this.__root__].resolve((this.__path__).toPath('../'));
		parent[PUBLIC](o);

		return this;
	};