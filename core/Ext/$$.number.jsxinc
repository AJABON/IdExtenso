/*******************************************************************************

		Name:           number
		Desc:           Extends Number.prototype
		Path:           /core/Ext/$$.number.jsxinc
		Require:        ---
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Part of /Ext
		API:            toSource() toHexa() toAdbe() isAdbe()
		DOM-access:     NO
		Todo:           ---
		Created:        170307 (YYMMDD)
		Modified:       171125 (YYMMDD)

*******************************************************************************/

	//==========================================================================
	// BACKGROUND
	//==========================================================================

	/*

	[ECMA] The Number type has exactly 18,437,736,874,454,810,627 values
	(2^64−2^53+3), representing double-precision 64-bit format IEEE 754
	values as specified in the IEEE Standard for Binary Floating-Point
	Arithmetic, except that the 9,007,199,254,740,990 (2^53−2) distinct
	`Not-a-Number` values of the IEEE Standard are represented in
	ECMAScript as a single special NaN value. (The NaN value is
	produced by the program expression `NaN`.) In some implementations,
	external code might be able to detect a difference between various
	Not-a-Number values, but such behaviour is implementation-dependent;
	to ECMAScript code, all NaN values are indistinguishable from each
	other.

	There are two other special values, called positive Infinity and
	negative Infinity. These two infinite Number values are produced
	by the program expressions `+Infinity` (or simply `Infinity`) and
	`-Infinity`.
	
	The other 18,437,736,874,454,810,624 (2^64−2^53) values are called
	the finite numbers. Half of these are positive numbers and half are
	negative numbers; for every finite positive Number value there is a
	corresponding negative value having the same magnitude.
	
	Note that there is both a positive zero and a negative zero. For
	brevity, these values are also referred to for expository purposes by
	the symbols +0 and −0, respectively. Note that these two different
	zero Number values are produced by the program expressions +0 (or
	simply 0) and -0.
	
	[REM] In ExtendScript, `+0 === -0` return true. The only way to
	make a distinction between positive and negative zero is to
	use a check routine looking like
	
	      function isNegativeZero(x) { return 0===x && (1/x < 0) }

	`Number.MAX_VALUE` refers to the LARGEST POSITIVE FINITE value of
	the Number type, which is approximately 1.7976931348623157 × 10^308.
	ExtendScript returns `1.7976931348623157e+308`.
	
	`Number.MIN_VALUE` refers to the SMALLEST POSITIVE VALUE of the
	Number type, which is approximately 5 × 10^-324 in ECMA.
	ExtendScript returns `2.2250738585072e-308`.
	
	The value of `Number.NaN` is NaN. This property has the attributes
	{ [[Writable]]:false, [[Enumerable]]:false, [[Configurable]]:false },
	while [[global]].NaN is writable. Hence, the safest way to access
	to NaN is to use `Number.NaN` rather than `NaN`. Alternately, one
	can produce NaN using `+{}`. Keep in mind that
	
	      typeof NaN == 'number'  // NaN *is* a number!
	      FALSE == (NaN===NaN)    // Use isNaN(x) instead!
	      FALSE == (NaN==NaN)     // Use isNaN(x) instead!

	The value of `Number.NEGATIVE_INFINITY` is −∞. This property has
	the attributes { [[Writable]]: false, [[Enumerable]]: false,
	[[Configurable]]: false }.

	The value of `Number.POSITIVE_INFINITY` is +∞. This property has
	the attributes { [[Writable]]: false, [[Enumerable]]: false,
	[[Configurable]]: false }.

	*/

	//==========================================================================
	// IMPLEMENTATION NOTES
	//==========================================================================

	/*

	While extending `Number.prototype`, never forget that `this` refers to
	a Number object, not to a scalar number. That is,
	
	      typeof this == 'object'   // not 'number'

	So, tests like `this===this>>>0` will obviously fail. Use `this.valueOf()`
	to handle a scalar number.

	*/

	//==========================================================================
	// Number.prototype.toSource()
	//==========================================================================

	Number.prototype.toSource = function toSource()
	//----------------------------------
	// [TODO] May be improved to get shorter strings ("1e5" etc)
	// => str
	{
		return String(this);
	};

	//==========================================================================
	// Number.prototype.toHexa() ; Number.prototype.toAdbe() ; Number.prototype.isAdbe()
	//==========================================================================

	Number.prototype.toHexa = function toHexa(/*str='0x'*/prefix,/*uint=0*/zeroPad,  s)
	//----------------------------------
	// Return the "0xHHHH" representation of this number. (Uppercase hexa digits.)
	// [FIX171125] isFinite test is better.
	// [ADD170423] `prefix`   If provided (string), reset the prefix (default is "0x").
	// [ADD170423] `zeroPad`  If > 0, minimum length of the hexa representation.
	// ---
	// E.g  toHexa(123456)          => "0x1E240"
	// E.g  toHexa(123456, "U+")    => "U+1E240"
	// E.g  toHexa(123, "")         => "7B"
	// E.g  toHexa(123, "", 4)      => "007B"
	// => str
	{
		if( !isFinite(this) ) return String(this);

		( 'string' == typeof prefix ) || (prefix='0x');
		( 'number' == typeof zeroPad && 0 < (zeroPad >>>= 0) ) || (zeroPad=0);
		
		s = this.toString(16).toUpperCase();
		
		return prefix +
			( zeroPad && 0 < (zeroPad-=s.length) ? Array(1+zeroPad).join('0') : '' ) +
			s;
	};

	Number.prototype.toAdbe = function toAdbe(  x)
	//----------------------------------
	// Return the Adobe's 4-char string this number encodes.
	// If `this` is not finite, return String(this).
	// [REM] If `this` is not an actual Adobe number (cf. isAdbe)
	// the function still consider it as if, working on this>>>0.
	// E.g  0x414F5069 => "AOPi" ; 0x74787466 => "txtf"
	// => str
	{
		return isFinite(x=this.valueOf()) ?
			String.fromCharCode( 0xFF&(x>>>24), 0xFF&(x>>>16), 0xFF&(x>>>8), 0xFF&(x>>>0) ) :
			String(this);
	};

	Number.prototype.isAdbe = function isAdbe(  x)
	//----------------------------------
	// Whether this Number looks like an Adobe 4-char tag.
	// [FIX171125] Added uint32 test.
	// E.g  1114394470 => 1    ;    12345 => 0
	//  ie  0x426C4F66 [OK]        0x3039 [KO]
	{
		return +(
			(x=this.valueOf())===x>>>0 &&
			8==(x=this.toString(16).toUpperCase()).length &&
			RegExp.ADBE.test(x)
			);
	};
