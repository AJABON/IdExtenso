/*******************************************************************************

		Name:           Screen
		Desc:           Screen & display information.
		Path:           /core/Env/$$.screen.jsxinc
		Require:        ---
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Part of the Env module.
		API:            centerWindow() -> $$
		                setActiveScreen() getActiveScreen() screenIndex()
		DOM-access:     YES (app.generalPreferences, app.properties.activeWindow)
		Todo:           ---
		Created:        180401 (YYMMDD)
		Modified:       190201 (YYMMDD)

*******************************************************************************/

	//==========================================================================
	// BACKGROUND
	//==========================================================================

	/*

	SCREEN COORDINATES.

	The origin of the 'Screen Coordinate Space' is the top-left corner of the
	*primary* screen. The 'primary' screen usually owns the system taskbar.
	This is not necessarily the screen that contains InDesign's main window
	on Win platforms.

	1. The ExtendScript property `$.screens` returns an array of
	   { left:L, top:T, right:R, bottom:B, primary:bool } objects describing
	   the screen regions in screen coordinates. E.g:

	      $.screens[0]:
	      { left:0, top:0, right:1680, bottom:1020, primary:true }

	      $.screens[1]:
	      { left:1680, top:-30, right:3600, bottom:1050, primary:false }

	   Note that the bottom edge of the primary screen is located at
	   Y=1020 (instead of 1050) because the taskbar is 30 pixels height in
	   the above configuration.

	2. `ScriptUI.workspace.bounds` is a static bounds structure purposed to describe
	    the entire viewport region that ScriptUI can address. Since multiple screens
	    are supported, the coordinate space of that region may be non-trivial. E.g,

	              { x:0, y:-29, width:3600, height:1079,
	                left:0, right:3600, top:-29, bottom:1050 }

	    represents a dual-display configuration based on a 1680x1050 primary screen
	    and a 1920x1080 secondary screen. The resulting workspace is as follows:

	         0                          1680                           3600
	    -29  +----------------------------+------------------------------+
	         | /////// DEAD ZONE //////// |                              |
	      0  +----------------------------+                              |
	         |                            |                              |
	         |                            |          SCREEN #2           |
	         |         SCREEN #1          |          1920x1080           |
	         |         1680x1050          |                              |
	         |                            |                              |
	   1050  +============================+------------------------------+

	   The top-left corner of the primary screen (i.e [0,0] in screen coords)
	   does not necessarily coincide with the top-left corner of ScriptUI's
	   workspace--located at (0,-29) in the figure.

	   The system taskbar is pictured `+=======+` in the figure.


	MONITOR INFORMATION.

	[RES] http://thatmichael.com/2014/02/how-to-change-indesigns-default-screen-resolution/
	[RES] https://forums.adobe.com/thread/744237
	[RES] Actual size problem: https://forums.adobe.com/thread/832105

	The set `app.generalPreferences` provides useful display parameters.

	      PROPERTY                   FROM  TYPE     DESCRIPTION
	      ==========================================================================
	      applicationBarShown        CS4   BOOL(RO) Whether application bar is shown.
	                                                True in Win.
	      --------------------------------------------------------------------------
	      useApplicationFrame        CS4   BOOL(RO) Whether the app lives in a frame.
	                                                True in Win.
	      --------------------------------------------------------------------------
	      mainMonitorPpi             CS6   UINT(RO) Value of the system reported main
	                                                monitor resolution, in ppi. E.g 96.
	      --------------------------------------------------------------------------
	      customMonitorPpi           CS6   UINT     When using a custom monitor resolution,
	                                                value of that resolution in ppi.
	                                                Application-persistent.
	      --------------------------------------------------------------------------
	      useCustomMonitorResolution CS6   BOOL     Enable the use of a custom monitor
	                                                resolution in ppi as opposed to
	                                                querying the system settings.
	                                                Application-persistent.
	      --------------------------------------------------------------------------

	About Mac OS application frame (app.generalPreferences.useApplicationFrame)
	see  https://helpx.adobe.com/creative-suite/kb/
	     troubleshoot-application-frame-document-window.html

	*/

	[PRIVATE]
	
	({

		SCRN: function(/*?Window*/w,  x,y,q,a,i,t,tt)
		//----------------------------------
		// [ADD180401] Backup screen and display info at loading stage.
		// [CHG180413] Preventing memory dups.
		// ---
		// Cached structure:
		//   q               ::  Array(screenCount)
		//   q[i]            ::  int[4]       [t,l,b,r]
		//   q[i].center     ::  int[2]       [x,y]
		//   -----------------------------------------------------------
		//   q.PRIM          ::  uint         Primary screen index
		//   q.ACTV          ::  ?uint        Active screen index, or undefined
		//   q.SUIB          ::  int[4]       [t,l,b,r]
		//   -----------------------------------------------------------
		//   q.APP_BAR_SHOWN ::  0|1          Whether the app bar is shown
		//   q.USE_APP_FRAME ::  0|1          Whether the app frame is used
		//   -----------------------------------------------------------
		//   q.MAIN_PPI      ::  uint | false[<CS6] Main monitor PPI, if known.
		//   q.CUSTOM_PPI    ::  uint | false[<CS6] Custom monitor PPI, if defined.
		//   q.USE_CUSTOM    ::  bool               Whether the custom PPI is in use
		//   q.CURRENT_PPI   ::  uint | false[<CS6] Current PPI, if known.
		//   -----------------------------------------------------------
		{
			q = callee.Q;
			
			if( w && (w=w.properties.bounds) )
			{
				x = (w[1]+w[3])/2;
				y = (w[0]+w[2])/2;
			}
			else
			{
				x = -1/0;
				y = -1/0;
			}

			delete q.ACTV;
			for( a=$.screens,i=q.length=a.length ; i-- ; )
			{
				t = a[i];
				tt = q[i] || (q[i]=Array(4));
				tt[0] = t.top;
				tt[1] = t.left;
				tt[2] = t.bottom;
				tt[3] = t.right;
				tt = tt.center || (tt.center=Array(2));
				tt[0] = (t.left+t.right)>>1;
				tt[1] = (t.top+t.bottom)>>1;

				t.primary && (q.PRIM=i);
				t.left <= x && x <= t.right && t.top <= y && y <= t.bottom && (q.ACTV=i);
			}
			
			t = ScriptUI.workspace.bounds;
			tt = q.SUIB || (q.SUIB=Array(4));
			tt[0] = t.top;
			tt[1] = t.left;
			tt[2] = t.bottom;
			tt[3] = t.right;

			t = app.generalPreferences.properties;
			q.APP_BAR_SHOWN = +(t.applicationBarShown);
			q.USE_APP_FRAME = +(t.useApplicationFrame);
			
			// CS6+
			// ---
			q.MAIN_PPI = t.mainMonitorPpi || false;
			q.CUSTOM_PPI = t.customMonitorPpi || false;
			q.USE_CUSTOM = t.useCustomMonitorResolution || false;
			q.CURRENT_PPI = q.USE_CUSTOM ? q.CUSTOM_PPI : q.MAIN_PPI;
		}
		.setup({ Q:[] })
		.self(µ['~'],app.properties.activeWindow),
		
		ISCR: function(/*int*/x,/*int*/y,  q,r,d,i,t,dx,dy)
		//----------------------------------
		// (Screen-Index.) Tell which screen contains the pt [x,y].
		// If [x,y] is outside of screen bounds, consider the screen
		// whose center point is closer to [x,y].
		// => uint
		{
			q = this.SCRN.Q;

			for( r=-1, d=1/0, i=q.length ; i-- ; )
			{
				t = q[i].center;
				dx = x - t[0];
				dy = y - t[1];
				d > (t=dx*dx + dy*dy) && ( (r=i), (d=t) );
			}

			return r;
		},

	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]

	({
		setActiveScreen: function setActiveScreen_I_B(/*uint*/idx,  q)
		//----------------------------------
		// [ADD190201] Forcibly set the active screen, by its index `idx`.
		// If `idx` is not a valid screen index, delete the internal `ACTV` key.
		// [REM] At any point of your script (e.g when an app.activeWindow is valid)
		// you may get hints about the "active screen", that is, the screen that
		// addresses the application frame. This function allows to register the
		// index you have found as the active screen index, which will then improve
		// other functions like `centerWindow()` etc.
		// => 1 [OK]  |  0 [KO]
		{
			q = callee.µ['~'].SCRN.Q;
			if( (idx !== idx>>>0) || idx >= q.length )
			{
				delete q.ACTV;
				return 0;
			}
			else
			{
				q.ACTV = idx;
				return 1;
			}
		},

		getActiveScreen: function getActiveScreen_i()
		//----------------------------------
		// [ADD190201] Return the active screen index (if known), or undef.
		// => 0|1|... [OK]  |  undef [KO]
		{
			return callee.µ['~'].SCRN.Q.ACTV;
		},
		
		centerWindow: function centerWindow_$SUIWindow$_$Window$_$SUIWindow$(/*SUIWindow*/w,/*?Window*/relWin,  q,xy,wh)
		//----------------------------------
		// [CHG180531] Added the `relWin` (optional) argument.
		// ---
		// => w
		{
			w.layout.layout(1);
			
			if( relWin && (relWin instanceof Window) )
			{
				w.center(relWin);
			}
			else
			{
				q = callee.µ['~'].SCRN.Q;
				xy = q[q.hasOwnProperty('ACTV')?q.ACTV:q.PRIM].center;
				wh = w.size;
				w.location = [xy[0]-(wh[0]>>1), xy[1]-(wh[1]>>1)];
			}

			return w;
		}
		.copy('..'),
		
		screenIndex: function screenIndex_p_I(/*?[x,y]*/xy,  I,q)
		//----------------------------------
		// [ADD190201] Return the index (0, 1, ...) of the screen that contains the point `xy`.
		// If `xy` is not supplied, return the 'active screen' index (if known), or the primary
		// screen index (fallback.)
		// ---
		// => 0 | 1 | ...
		{
			q = (I=callee.µ['~']).SCRN.Q;
			
			return xy && 'number'==typeof xy[0] && 'number'==typeof xy[1] ?
				I.ISCR( (0|xy[0]), (0|xy[1]) ) :
				q[q.hasOwnProperty('ACTV')?'ACTV':'PRIM'];
		},
	})
