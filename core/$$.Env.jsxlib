/*******************************************************************************

		Name:           Env
		Desc:           Environment module.
		Path:           /core/$$.Env.jsxlib
		Require:        Enumeration.prototype.revSource
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Module.
		API:            =summary() onLoad() onUnload() engineState() runCount()
		                appScriptsPath usrScriptsPath appLocaleId
		                isValidLocaleId() localeIdToString()
		                idVersion() idFullName() idEngine()
		                userAgent()
		                $$.idVersion() $$.inWin $$.inMac $$.newLine $$.inBin
		                $$.inCC $$.inCS $$.isDark
		DOM-access:     GET(app,Locale,app.generalPreferences)
		Todo:           background ; documentation
		Created:        150507 (YYMMDD)
		Modified:       170408 (YYMMDD)

*******************************************************************************/

;eval(__(MODULE, $$, 'Env', 170408, 'summary'))

	//==========================================================================
	// BACKGROUND
	//==========================================================================

	/*


	*/

	[PRIVATE]
	
	({
		OSYS : String($.os),                                   // eg "Windows 7/64 6.1 Service Pack 1 (32-bit emulation)"
		OSMC : +('W'!=File.fs[0].toUpperCase()),               // 1 (mac) | 0 (win)

		JXBN : 1-/zzz/.test((function(){/*zzz*/}).toSource()), // 1 (in jsxbin) | 0 (uncompiled)

		IDVS : String(app.version),                            // eg "11.1.0.22"
		IDNB : parseFloat(app.version),                        // eg  11.1 | 8 [subdigits are ignored.]

		ESVS : __("%1 (build: %2)", $.version, $.build),       // eg "4.5.6 (build: 80.1060872)"
		ESNB : parseFloat($.version),                          // eg  4.5  [subdigits are ignored.]
		
		SUVS : __("%1 (core: %2/%3)",                          // eg "6.1.8 (core: 6.2.2/Drover)"
				ScriptUI.version,                              //    "4.0.38 (core: 4.0.19/Win32)"
				ScriptUI.coreVersion,
				ScriptUI.frameworkName),
		SUNB : parseFloat(ScriptUI.version),                   // eg  6.1  [subdigits are ignored.]

		LOCZ : +(app.locale),                                  // Enum ID (conversion required in CS5 and later.)
		LZ2S : eval(Locale.revSource()),                       // {1279476846:"DANISH_LOCALE", 1279477102:"ENGLISH_LOCALE", etc}
		LANG : String($.locale),                               // eg "fr_FR"
		LZSS : +[$.localize,$.localize=false][0],              // 0 | 1 [whether ExtendScript localizer was ON on $$ startup.]

		INCP : String($.includePath),                          // Path for include files for the current script.
		ENGI : String($.engineName),                           // Name of the current ExtendScript engine.
	})

	[PRIVATE]
	
	({
		LPFX : µ['~'].LZ2S[µ['~'].LOCZ].replace('_LOCALE',''),  // 'FRENCH' | 'GERMAN' | 'ENGLISH' ...

		IDPK : String(µ['~'].OSMC ? Folder.appPackage.parent : Folder.appPackage),
		
		DARK : +(9 <= µ['~'].IDNB && .5 >= app.generalPreferences.uiBrightnessPreference),

		IDNM : __("%1 (%2)",
			9 <= µ['~'].IDNB ? ("CC"+µ['~'].IDNB) : ("CS"+(µ['~'].IDNB-2)),
			µ['~'].IDVS
			),

		// Engine state.
		// ---
		// -1 :: non-persistent engine
		//  0 :: already processed persistent engine (see $$.load.)
		//  1 :: in-processing (i.e first call) persistent engine
		// ---
		ENST: 'main'==µ['~'].ENGI ? -1 : +1,
	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]
	
	({
		onLoad: function onLoad_(  $$)
		//----------------------------------
		{
			$$ = $.global[callee.µ.__root__]; // agnostic reference

			(+$$.trace) && $$.trace(__("%1 > %2",callee.µ,callee.µ.summary($$.newLine+$$.Log.spaces)));

			$.localize = false;
		},

		onUnload: function onUnload_()
		//----------------------------------
		{
			// Reset initial state of ExtendScript localizer.
			// ---
			$.localize = !!(callee.µ['~'].LZSS);
		},

		summary: function summary_s_S(/*str=$$.newLine*/sep,  $$,I)
		//----------------------------------
		// Collect and return interesting environment data.
		// `sep` :: line separator (default: $$.newLine)
		// ---
		// [CHG170408] =auto. So you can run `alert($$.Env())`
		// [TODO] Script-related environment data.
		// => str
		{
			$$ = $.global[callee.µ.__root__]; // agnostic reference
			I = callee.µ['~'];
			
			sep = 'undefined' == typeof sep ? $$.newLine : String(sep);
			
			return [
			__("OS %1",                       I.OSYS),
			__("InDesign: %1 [%2 UI]",        I.IDNM, I.DARK?'Dark':'Bright'),
			__("ExtendScript: %1",            I.ESVS),
			__("ScriptUI: %1",                I.SUVS),
			__("IdExtenso: %1 (run #%2)",     $$.__modf__/1e5, callee.µ.runCount()),
			__("Engine: [%1] (%2)",           I.ENGI,callee.µ.engineState(1)),
			__("Script: ---"),
			__("Locale: %1 (%2)",             I.LPFX, I.LANG)
			].join(sep);
		},

		engineState: function engineState_b_TS(/*0|1=0*/AS_STRING,  t)
		//----------------------------------
		// (default) => -1 | 0 | +1
		// ---
		// [ADD170406]:
		// AS_STRING => non-persistent | persistent-processed | persistent-fist-call
		{
			t = callee.µ['~'].ENST;
			return AS_STRING ? callee.Q[t] : t;
		}.setup(
		{Q:{
			'-1': 'non-persistent',
			'0' : 'persistent/processed',
			'1' : 'persistent/fist-call'
		}}),

		runCount: function runCount_I()
		//----------------------------------
		// => 1, 2, 3...
		{
			return $.getenv('IDEXTENSO');
		},

		appScriptsPath : String(Folder(µ['~'].IDPK+'/Scripts')),

		usrScriptsPath : String(app.scriptPreferences.scriptsFolder.parent),
		
		appLocaleId : µ['~'].LOCZ,
		
		isValidLocaleId : function isValidLocaleId_I_B(/*uint*/iLocale)
		//----------------------------------
		// => 0 | 1
		{
			return +(callee.µ['~'].LZ2S.hasOwnProperty(+iLocale));
		},

		localeIdToString : function localeIdToString_I_S(/*uint*/iLocale,/*0|1=0*/KEEP_LOCALE_SUFFIX,  s)
		//----------------------------------
		// => str | ''
		// E.g 'INTERNATIONAL_ENGLISH_LOCALE'
		{
			s = callee.µ['~'].LZ2S[+iLocale] || '';
			return (KEEP_LOCALE_SUFFIX || !s) ? s : s.replace('_LOCALE','');
		},

		idVersion : function idVersion_ns_b_SB(/*?|num|str*/ver,/*bit=0*/EQUAL)
		//----------------------------------
		// Return, or compare, the current InDesign version number.
		// If no argument is supplied,
		// => full INDD version as a string, incl. subdigits, eg '11.1.0.22'.
		// If `ver` is supplied (String or Number), interpret it as a number and
		// => 1 if the current INDD version is greater or equal, 0 otherwise.
		// If EQUAL is turned on,
		// => 1 if the current INDD version matches `ver` digits (# or #.#),
		//    0 otherwise.
		{
			return 'undefined' == typeof ver ?
				callee.µ['~'].IDVS :
				+(
					EQUAL ?
					( (ver=''+parseFloat(''+ver)),(''+callee.µ['~'].IDNB).substr(0,ver.length) == ver ) :
					( callee.µ['~'].IDNB >= parseFloat(''+ver) )
				);

		}.copy('..'),
		
		idFullName : function idFullName_S()
		//----------------------------------
		// Eg => "Adobe InDesign CS5.5 (7.5.5.xx)"
		{
			return "Adobe InDesign " + callee.µ['~'].IDNM;
		},
		
		idEngine : function idEngine_S()
		//----------------------------------
		// Eg => "main" | "MyTargetEngine"
		{
			return callee.µ['~'].ENGI;
		},
		
		userAgent : function userAgent_S()
		//----------------------------------
		// [RES] https://tools.ietf.org/html/rfc7231#section-5.5.3
		// [RES] https://en.wikipedia.org/wiki/User_agent#User_agent_identification
		// Eg => "IdExtenso/1.70403 ExtendScript/3.92 Adobe-InDesign/6.0.6.622"
		{
			return __("IdExtenso/%1 ExtendScript/%2 Adobe-InDesign/%3",
				$.global[callee.µ.__root__].__modf__/1e5,
				callee.µ['~'].ESNB,
				callee.µ['~'].IDVS
				);
		},
	})

	[PARENT]
	
	({
		inMac : +µ['~'].OSMC,
		inWin : 1 - µ['~'].OSMC,
		
		// Mac OS Unix     :: <LF>   ie \n
		// Classic Mac OS  :: <CR>   ie \r  [obsolete]
		// Windows         :: <CR>   ie \r  [<CRLF> is not needed]
		// ---
		newLine : µ['~'].OSMC ? String.LF : String.CR,
		
		inBin : µ['~'].JXBN,

		inCC  : +(9 <= µ['~'].IDNB),
		inCS  : +(9 > µ['~'].IDNB),
		
		isDark : µ['~'].DARK,
	})
